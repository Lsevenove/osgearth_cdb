// Copyright (c) 1994-2013 Georgia Tech Research Corporation, Atlanta, GA
// This file is part of FalconView(tm).

// FalconView(tm) is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// FalconView(tm) is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with FalconView(tm).  If not, see <http://www.gnu.org/licenses/>.

// FalconView(tm) is a trademark of Georgia Tech Research Corporation.
// 2014-2015 GAJ Geospatial Enterprises, Orlando FL
// Modified for General Incorporation of Common Database (CDB) support within osgEarth

// CDBTileSource
//

#ifndef OSGEARTH_DRIVERS_CDBTILESOURCE
#define OSGEARTH_DRIVERS_CDBTILESOURCE 1

#include <osgEarth/TileSource>
#include <gdal_priv.h>
#include <ogr_spatialref.h>
#include <cpl_string.h>

#include "CDBOptions"

#define JP2DRIVERCNT 5

class CDBTileSource : public osgEarth::TileSource
{
public:
   CDBTileSource( const osgEarth::TileSourceOptions& options );

   Status initialize(const osgDB::Options* dbOptions);


   osg::Image* createImage(const osgEarth::TileKey& key,
      osgEarth::ProgressCallback* progress );

   osg::HeightField* createHeightField(const osgEarth::TileKey& key,
      osgEarth::ProgressCallback* progress );

   std::string getExtension()  const;
    
   osgEarth::CachePolicy getCachePolicyHint() const;

private:

   const osgEarth::Drivers::CDBOptions           _options;
   osg::ref_ptr<osgDB::Options> _dbOptions;
 
   bool			_UseCache;
   std::string	_rootDir;
   std::string	_cacheDir;
   int			_tileSize;
   GDALDriver * _JP2Driver;
   GDALDriver * _GTIFFDriver;
   GDALDriver * _HFADriver;

   OGRSpatialReference * _CDB_SRS;

   std::string	_JP2DriverNames[JP2DRIVERCNT];

   int GetPathComponents(const osgEarth::TileKey& key, bool elevation,
						std::string& lat_str, std::string& lon_str, std::string& lod_str,
						std::string& uref_str, std::string& rref_str, std::string &LayerName_str,
						std::string& dataset_str, std::string &filetype_str, int &LatBase, int &LonBase);

   std::string CDBFilename(int cdbLod, std::string &rootDir, std::string& lat_str, std::string& lon_str, std::string& lod_str,
						   std::string& uref_str, std::string& rref_str, std::string &LayerName_str,
						   std::string& dataset_str, std::string &filetype_str);

   std::string CDBCachename(int cdbLod, std::string &cacheRootDir, std::string &lat_str, std::string& lon_str, std::string& lod_str,
							std::string& uref_str, std::string& rref_str, std::string &LayerName_str,
							std::string& dataset_str, std::string &filetype_str);

   void LatLonstr(int LatBase, int LonBase, std::string &lat_str, std::string &lon_str);

   bool CreateCacheFile(std::string &cacheName, const osgEarth::TileKey& key, void * data, GDALDataType DType, int nband);

   bool Has_Content(int cdbLod, std::string &rootDir, std::string& lod_str,
					std::string& uref_str, std::string& rref_str, std::string &LayerName_str,
					std::string& dataset_str, std::string &filetype_str, int LatBase, int LonBase);

#ifdef _MSC_VER
#if _MSC_VER < 1800
   double round(double x);
#endif
#endif

};

#endif // OSGEARTH_DRIVERS_CDBTILESOURCE